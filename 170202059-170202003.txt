#######  app.js ########
//Import Libraries
const express = require("express");
const path = require("path");
const mongoose = require('mongoose');
const fileUpload = require("express-fileupload");
const bookAdmin = require("./models/bookAdmin");
const bookUser = require("./models/bookUser");
const users = require("./models/user");
const { createWorker } = require("tesseract.js");
let systemDate = new Date();
let errorCode;
let loggedUser = {
	id: "",
	username: "",
	mode: "",
	logged: false,
	hasMoreThanThreeBooks: false,
	hasOutOfDateBook: false,
	someOneHasBook: false
}

//const worker = createWorker();
const app = express();
//Map global promise - get rid of warning
mongoose.Promise = global.Promise;
mongoose.connect("mongodb://locaLhost:27017/library", {
	useNewUrlParser: true,
	useUnifiedTopology: true
});
const PORT = process.env.PORT || 5000;
const address = path.join(__dirname, "public/");
console.log("ADRES: " + address);
mongoose.connection
	.once('open', () => {
		console.log('Kütüphane veri tabanına bağlanıldı.');
		console.log("Sistem Tarihi: " + systemDate.getDate() + " " + (systemDate.getMonth() + 1) + " " + systemDate.getFullYear());
	})
	.on('error', (error) => {
		console.log("VERİ TABANINA BAĞLANIRKEN BİR ŞEYLER TERS GİTTİ! : ", error);
	})


//app.use(express.static(path.join(__dirname, 'public')));
//app.use(express.urlencoded({extended:false}));
app.use(fileUpload());
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.get('/getUsers', async (req, res) => {
	//Listing Users
	const ress = await bookUser.find();
	const userlist = await users.find();
	console.log(typeof ress);
	let obj1;
	let obj2;
	let obj3 = [];
	for (let i = 0; i < ress.length; i++) {
		for (let m = 0; m < userlist.length; m++) {
			obj1 = userlist[m].toObject();
			obj2 = ress[i].toObject();
			//console.log("obj2: " + obj2);
			let a = String(obj1._id);
			let b = String(obj2._id);
			//console.log(obj1._id + " " + obj2._id);
			if (a == b) {
				//console.log(1);
				//console.log("İSİM: " + obj1.username);
				let c = String(obj1.username);
				obj2._id = c;
				//console.log("İSİM:2 " + obj2._id);
				obj3.push(obj2);
				break;
			}
		}
	}
	//obj2 = ress[0].toObject();
	//console.log("MEH: " + obj3);
	res.json(obj3);
});

app.get('/', (req, res) => {
	if (loggedUser.mode == "admin") {
		res.redirect('/admin');
	} else if (loggedUser.mode == "user") {
		res.redirect('/user');
	} else if (loggedUser.mode == "") {
		res.redirect("/login");
	}
});

//req = request, res = response
app.get('/admin', (req, res) => {
	//					&& loggedUser.mode != admin
	if (loggedUser.logged != true) {
		res.redirect("/login");
	} else if (loggedUser.mode != "admin") {
		res.redirect('/user');
	}
	else if (loggedUser.mode == "admin") {
		res.sendFile(address + 'admin.html');
	}
});

app.get('/getUserName', (req, res) => {
	res.json(loggedUser.username);
});

app.get('/user', (req, res) => {
	if (loggedUser.logged != true) {
		res.redirect("/login");
	} else if (loggedUser.mode != "user") {
		res.redirect('/admin');
	}
	else if (loggedUser.mode == "user") {
		res.sendFile(address + 'user.html');
	}
	//res.sendFile(address + 'login.html');
});

app.get('/login', (req, res) => {
	res.sendFile(address + 'login.html');
});

app.post('/assignBook', async (req, res) => {
	let query = req.body.bookInfo.toLowerCase();
	let obj = "";
	let result = "";
	console.log("ARANAN:" + query);
	let regex = /[A-Za-z]/g;
	const found = query.match(regex);
	resetUserBookSettings();
	//Checks if the string is a ISBN or a book name.
	if (found) {
		query = query.toLowerCase();
		//console.log(query);
		const doc = await bookAdmin.find({ fileName: query }, async function (err, data) {
			if (err) {
				console.log("KİTAP ADINI ARARKEN BİR ŞEYLER TERS GİTTİ!: ", err);
				res.json("error");
			} else if (data.length == 0) {
				console.log("KİTAP BULUNAMADI!\n" + data[0]);
				console.log("/ASSIGNBOOK NORMAL QUERY");
				res.json(obj);
			} else {
				await searchBookOwners(data[0].isbnNumber);
				//assignBook(data[0].isbnNumber);
				console.log("ARADIĞINIZ: " + query);
				console.log("Kitap Adı: " + data[0].fileName + " ID: " + data[0]._id + " ISBN: " + data[0].isbnNumber);
				obj = { hasMoreThanThreeBooks: loggedUser.hasMoreThanThreeBooks, hasOutOfDateBook: loggedUser.hasOutOfDateBook, someOneHasBook: loggedUser.someOneHasBook }
				//result = JSON.stringify(obj);
				res.json(obj);
			}
		});
	} else {
		const doc = await bookAdmin.find({ isbnNumber: query }, async function (err, data) {
			if (err) {
				console.log("ISBN ARARKEN BİR ŞEYLER TERS GİTTİ!: ", err);
				res.json("error");
			} else if (data.length == 0) {
				console.log("KİTAP BULUNAMADI!\n" + data[0]);
				console.log("/ASSIGNBOOK ISBN QUERY");
				res.json(obj);
			} else {
				await searchBookOwners(data[0].isbnNumber);
				//assignBook(data[0].isbnNumber);
				console.log("ARADIĞINIZ: " + query);
				console.log("Kitap Adı: " + data[0].fileName + " ID: " + data[0]._id + " ISBN: " + data[0].isbnNumber);
				obj = { hasMoreThanThreeBooks: loggedUser.hasMoreThanThreeBooks, hasOutOfDateBook: loggedUser.hasOutOfDateBook, someOneHasBook: loggedUser.someOneHasBook }
				//result = JSON.stringify(obj);
				res.json(obj);
			}
		});
	}
	//res.redirect('/user');
});

app.post('/setDate', (req, res) => {
	let day = parseInt(req.body.dayNumber);
	let state = changeSystemDate(day);
	if (state == 0) {
		console.log("TARİHİ DEĞİŞTİRİRKEN HATA MEYDANA GELDİ!");
		res.json(0);
	} else {
		let str = systemDate.getDate() + " " + (systemDate.getMonth() + 1) + " " + systemDate.getUTCFullYear();
		//console.log(str);
		//console.log(JSON.stringify(str));
		res.json(str);
	}
	//res.json(state);
	//res.redirect('/admin');
});

app.post('/userSearch', async (req, res) => {

	let query = req.body.queryvar.toLowerCase();
	//console.log("QUERY:"+query);
	let regex = /[\ö\ü\Ö\ÜA-Za-z]/g;
	const found = query.match(regex);
	let obj = "";
	let result = "";
	//Checks if the string is a ISBN or a book name.
	if (found) {
		query = query.toLowerCase();
		const doc = await bookAdmin.find({ fileName: query }, function (err, data) {
			if (err) {
				console.log("KİTAP ADINI ARARKEN BİR ŞEYLER TERS GİTTİ!!: ", err);
			} else if (data.length == 0) {
				console.log("/USERSEARCH NORMAL QUERY");
				console.log("KAYIT BULUNMADI!!");
			} else {
				console.log("ARADIĞINIZ: " + query);
				console.log("Kitap Adı: " + data[0].fileName + " ID: " + data[0]._id + " ISBN: " + data[0].isbnNumber);
				obj = { bookname: data[0].fileName, id: data[0]._id, isbn: data[0].isbnNumber };
				result = JSON.stringify(obj);
				//console.log("SONUÇ:" + result);
			}
		});
	} else {
		const doc = await bookAdmin.find({ isbnNumber: query }, function (err, data) {
			if (err) {
				console.log("ISBN ARANIRKEN BİR ŞEYLER TERS GİTTİ!: ", err);
			} else if (data.length == 0) {
				console.log("/USERSEARCH ISBN QUERY");
				console.log("KAYIT BULUNAMADI!");
			} else {
				console.log("ARADIĞINIZ: " + query);
				console.log("Kitap Adı" + ":" + data[0].fileName + " ID: " + data[0]._id + " ISBN: " + data[0].isbnNumber);
				obj = { bookname: data[0].fileName, id: data[0]._id, isbn: data[0].isbnNumber };
				result = JSON.stringify(obj);
				//console.log("SONUÇ:" + result);
			}
		});
	}
	//console.log("OBJ: " + obj);
	res.json(obj);
});

app.post('/login', async (req, res) => {
	let username = req.body.username;
	let password = req.body.password;
	let userid = await findUser(username, password);
	if (userid == "none") {
		res.redirect('/login');
	}
	if (loggedUser.mode == "user") {
		console.log("GİRİŞ YAPAN:" + loggedUser.id + " " + loggedUser.username);
		res.redirect('/user');
	} else if (loggedUser.mode == "admin") {
		console.log("GİRİŞ YAPAN:" + loggedUser.id + " " + loggedUser.username);
		res.redirect('/admin');
	}
});

app.post('/admin', (req, res) => {
	//Book name is stored in the bookname variable. Book's ISBN image is stored in bookImage object.
	let bookName = req.body.bookname.toLowerCase();
	let imageFile = req.files.bookImage;
	let imageAddress = './isbnPictures/' + bookName + ".jpeg";
	console.log("Resim dosyasının adı: " + imageFile.name);
	//console.log("Image object: " + imageFile);
	console.log("Kitabın Adı: " + bookName);

	imageFile.mv(imageAddress, async function (error) {
		if (error) {
			console.log("Resim dosyası upload edilemedi.");
			console.log(error);
			errorCode = 0;
			res.json(errorCode);
		} else {
			console.log("Resim dosyası başarıyla upload edildi!");
			console.log("Resim üzerinden ISBN okunuyor...");
			await readImageAndUploadBookInfo(imageAddress, bookName);
			console.log("ERRORCODE: " + errorCode);
			res.json(errorCode);
		}
	});
	//res.redirect("/admin");
});

app.post('/return', async (req, res) => {
	let imageFile = req.files.returnBookImage;
	console.log("Resim dosyasının adı: " + imageFile.name);
	//console.log("Image object: " + imageFile.tempFilePath);
	console.log("Resim üzerinden ISBN okunuyor...");
	let bleagh = await getTextFromImage(imageFile.data);
	let status = await deleteBook(bleagh);
	res.json(status);
});

app.listen(PORT, () => console.log(`Sunucu ${PORT} portunda başlatıldı!`));

function resetUserBookSettings() {
	loggedUser.hasMoreThanThreeBooks = false;
	loggedUser.hasOutOfDateBook = false;
	loggedUser.someOneHasBook = false;
}

async function deleteBook(isbn) {
	console.log("SİL: " + isbn);
	let control = await bookUser.find({ "_id": loggedUser.id, "books.bookIsbn": isbn });
	console.log("control: " + control);
	//console.log(typeof isbn);

	if (control.length == 0) {
		console.log("Kitaba sahip olmadığınız için geri veremezsiniz!");
		return 0;
	} else {
		let remove = await bookUser.findOneAndUpdate({ "_id": loggedUser.id }, { $pull: { books: { bookIsbn: isbn } } }, { new: true });
		console.log("Silindikten sonra kullanıcı envanteri: " + remove);
		return 1;
	}
}

//Search book owners
async function searchBookOwners(isbnNumber) {
	const res = await bookUser.findById(loggedUser.id);
	let canTakeBook = false;
	//Check if the user have out of date book
	let outoOfDateBook = false;
	if (res == null) {
		console.log("COLLECTION YOK!: " + res);
		await firstAssignment();
		canTakeBook = await whoHasTheBook(isbnNumber);
		if (canTakeBook) {
			let bkn = await bookAdmin.find({"isbnNumber":isbnNumber});
			let varb = bkn[0].fileName;
					//console.log("varbtype: "+typeof varb);
					//console.log("BKN:" + bkn[0].fileName);
					await addBook(isbnNumber, varb);
		} else {
			//if canTakeBook is false then user can't take book. Because someone else owns the book.
			loggedUser.someOneHasBook = true;
		}
	} else if (res.books.length == 0) {
		console.log("KİTAP DİZİSİ BOŞ!" + res);
		canTakeBook = await whoHasTheBook(isbnNumber);
		if (canTakeBook) {
			let bkn = await bookAdmin.find({"isbnNumber":isbnNumber});
			let varb = bkn[0].fileName;
					console.log("varbtype: "+typeof varb);
					console.log("BKN:" + bkn[0].fileName);
					await addBook(isbnNumber, varb);
		} else {
			//if canTakeBook is false then user can't take book. Because someone else owns the book.
			loggedUser.someOneHasBook = true;
		}
	} else if (res.books.length != 0) {
		//console.log("res.books.length: " +res.books.length);
		outoOfDateBook = await searchOutOfDateBook();
		if (outoOfDateBook) {
			canTakeBook = await whoHasTheBook(isbnNumber);
			if (canTakeBook) {
				if (res.books.length >= 3) {
					console.log("Zaten 3 kitaba sahipsiniz! Daha fazla kitap alamazsınız!");
					loggedUser.hasMoreThanThreeBooks = true;
					return;
				} else {
					let bkn = await bookAdmin.find({"isbnNumber":isbnNumber});
					let varb = bkn[0].fileName;
					console.log("varbtype: "+typeof varb);
					console.log("BKN:" + bkn[0].fileName);
					await addBook(isbnNumber, varb);
				}
			} else {
				loggedUser.someOneHasBook = true;
			}
		} else {
			loggedUser.hasOutOfDateBook = true;
		}
	}
}

async function searchOutOfDateBook() {
	console.log("GİRİŞ YAPAN KULLANICI ID: " + loggedUser.id);
	const res = await bookUser.find({ "_id": loggedUser.id });
	console.log(res);
	console.log(res[0].books.length);
	for (let m = 0; m < res[0].books.length; m++) {
		//let anotherBottleDown = res[0].books[m].bookDate
		//console.log(typeof anotherBottleDown);
		console.log("Sistem Tarihi: " + systemDate);
		console.log("İade Tarihi: " + res[0].books[m].returnDate);
		//console.log(res[0].books[m].returnDate.getDate());
		//console.log(res[0].books[m].returnDate.getMonth());
		//console.log(res[0].books[m].returnDate.getFullYear());
		//console.log(Math.floor((res[0].books[m].returnDate - systemDate) / (24 * 60 * 60 * 1000)));
		let dayDiff = Math.floor((Date.UTC(res[0].books[m].returnDate.getFullYear(), res[0].books[m].returnDate.getMonth(), res[0].books[m].returnDate.getDate()) - Date.UTC(systemDate.getFullYear(), systemDate.getMonth(), systemDate.getDate())) / (1000 * 60 * 60 * 24));
		console.log("Gün Farkı: " + dayDiff);
		if (dayDiff < 0) {
			console.log("İade tarihi geçmiş kitaba sahipsiniz! Yeni kitap alamazsınız!");
			return false;
		} else {
			return true;
		}
	}
}

async function whoHasTheBook(isbn) {
	const res = await bookUser.find({ "books.bookIsbn": isbn });
	//console.log("LENGTH!: " + res.length);
	if (res.length != 0) {
		console.log(res);
		for (var i = 0; i < res[0].books.length; i++) {
			console.log(res[0].books[i]);
		}
		const doc = await users.findById(res[0]._id);
		console.log(doc);
		console.log("Başka bir kullanıcı bu kitabı aldı!: " + doc.username + " " + res[0]._id + " " + res[0].books[0].bookIsbn + " " + res[0].books[0].bookDate);
		return false;
	} else {
		console.log("Kitap boşta!: " + isbn);
		return true;
	}
}

async function addBook(isbnNumber, name) {
	let day = systemDate.getDate() + 7;
	let assigningDate = new Date(systemDate.getFullYear(), systemDate.getMonth(), day, 0, 0, 0, 0);
	let book = { "bookIsbn": isbnNumber, "bookname": name,"bookDate": systemDate, "returnDate": assigningDate };
	await bookUser.findOneAndUpdate({ _id: loggedUser.id }, { $push: { books: book } })
		.catch((err) => {
			console.log(err);
		});
	console.log("Kitap Veriliş Tarihi: " + assigningDate);
	console.log("Sistem Tarihi: " + systemDate);
}

//If user can't be found on the database this function is called. And user is added.
async function firstAssignment() {
	let bookAssign = new bookUser({
		_id: loggedUser.id,
		books: []
	});
	await bookAssign.save()
		.then((data) => {
			console.log("COLLECTION'A KULLANICI EKLENDİ: " + data);
		})
		.catch((err) => {
			console.log("KİTAP VERİLEMEDİ: " + err);
		})
}

async function fuk(isbnText, bookName) {
	console.log("ISBN UPLOAD EDİLİYOR: " + isbnText + " ...");
	const dbStateText = await addBookInfo(isbnText, bookName);
	console.log("VT DURUMU: " + dbStateText);
	const books = await searchBook();
	for (let i = 0; i < books.length; i++) {
		console.log("KİTAP " + i + ": " + books[i]);
	}
}

async function readImageAndUploadBookInfo(imageAddress, bookName) {
	let isbnText = await getTextFromImage(imageAddress).catch({
		errorCode: 2
	});
	await fuk(isbnText, bookName);
	/*
	getTextFromImage(imageAddress)
		.then((isbnText) => {
			fuk(isbnText, bookName);
		})
		.catch(

		);*/
}

//Add Book Info
function addBookInfo(number, name) {
	return new Promise(async (resolve) => {
		console.log("ADDBOOKINFO FONKSİYONUNUN ALDIĞI ISBN: " + number);
		const uploadingPostedData = new bookAdmin({
			"isbnNumber": number,
			"fileName": name
		});
		await uploadingPostedData.save()
			.then(
				data => {
					console.log(data);
					errorCode = 1;
					resolve("Kitap başarıyla veri tabanına eklendi!");
				})
			.catch(err => {
				console.log("VERİ TABANINA KİTAP EKLENİRKEN HATA OLUŞTU!: " + err);
				errorCode = 2;
			});
	})
}

//Image Processing
async function getTextFromImage(address) {
	const worker = createWorker();
	await worker.load()
	await worker.loadLanguage('eng')
	await worker.initialize('eng')

	const { data: { text } } = await worker.recognize(address);
	let temporaryText = text.split("\n");
	//console.log(temporaryText);
	let searchIndex = -1;
	for (let m = 0; m < temporaryText.length; m++) {
		let varo = temporaryText[m];
		if (varo.includes("ISBN")) {
			console.log("INDEX: " + m + " TEXT: " + temporaryText[m]);
			searchIndex = m;
			break;
		}
	}
	let text2 = temporaryText[searchIndex].replace("ISBN ", "");
	//temporaryText = text2.replace(/-/g, "");
	temporaryText = text2.replace(/[\!\"\#\$\%\&\'\(\)\*\+\,\ \- \.\:\;\<\=\>\?\@\[\]\^\_\`\{\|\}\~a-zA-Z/-]/g, "");
	await worker.terminate()

	return temporaryText;
}

//Creating Date Variable
function changeSystemDate(dayNumber) {
	//console.log("variable type: " + typeof dayNumber);
	console.log("GÜN SAYISI:" + dayNumber);
	if (typeof dayNumber == "number") {
		systemDate = new Date(systemDate.getFullYear(), systemDate.getMonth(), (systemDate.getDate() + dayNumber), 0, 0, 0);
		console.log("YENİ SİSTEM TARİHİ!: " + systemDate);
		return 1;
	} else {
		console.log("ERROR: dayNumber değişkeni bir sayı değil!");
		return 0;
	}
}

//Search Books
function searchBook() {
	return new Promise(resolve => {
		const books = bookAdmin.find();
		resolve(books);
	})
}
//Search Users
async function findUser(username, password) {
	const res = await users.find({ "username": username, "password": password });
	console.log(res);
	if (res.length == 0) {
		console.log("VERİ TABANINDA KULLANICI BULUNAMADI!");
		return "none";
	} else {
		loggedUser.username = res[0].username;
		loggedUser.id = res[0]._id;
		loggedUser.mode = res[0].mode;
		loggedUser.logged = true;
		return res[0]._id.toString();
	}
}

#### bookAdmin.js ###############

const mongoose = require("mongoose");

const Schema = mongoose.Schema;

const bookAdminSchema = new Schema({
   // _id:
   isbnNumber:{type:String, trim:true, default:0, required: true},
   fileName:{type:String, trime:true,default:"", required:true}
   //returnDate:{type:Date, trim:true, required:true}
}); 

const bookAdmin = mongoose.model('bookAdmin', bookAdminSchema);

module.exports = bookAdmin;

##### user.js ##########

const mongoose = require("mongoose");

const Schema = mongoose.Schema;

const usersSchema = new Schema({
    mode:{type:String, trim:true, required:true},
    username:{type:String, trim:true, default:"username", required:true},
    password:{type:String, trim:true, default:"password", required:true},
});

const users = mongoose.model('users', usersSchema);

module.exports = users;


#### bookUser.js ####################

const mongoose = require("mongoose");

const Schema = mongoose.Schema;

const bookUserSchema = new Schema({
    //user _id
    //_id:{type:mongoose.ObjectId,required:true},
    books:[
        {
            bookIsbn:{type:String, trim:true, default:0},
            bookname:{type:String},
            //Date
            bookDate:{type:Date},
            returnDate:{type:Date}
        }
    ]
});

const bookUser = mongoose.model("bookUser", bookUserSchema);

module.exports = bookUser;


####### user.html ##############

<!DOCTYPE html>
<html lang="en">

<head>
  <title>Kullanıcı Sayfası &mdash;</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link href="https://fonts.googleapis.com/css?family=Roboto+Mono" rel="stylesheet">
  <link rel="stylesheet" href="adminUserPage/fonts/icomoon/style.css">
  <link rel="stylesheet" href="adminUserPage/css/bootstrap.min.css">
  <link rel="stylesheet" href="adminUserPage/css/magnific-popup.css">
  <link rel="stylesheet" href="adminUserPage/css/jquery-ui.css">
  <link rel="stylesheet" href="adminUserPage/css/owl.carousel.min.css">
  <link rel="stylesheet" href="adminUserPage/css/owl.theme.default.min.css">
  <link rel="stylesheet" href="adminUserPage/css/bootstrap-datepicker.css">
  <link rel="stylesheet" href="adminUserPage/fonts/flaticon/font/flaticon.css">
  <link rel="stylesheet" href="adminUserPage/css/aos.css">

  <link rel="stylesheet" href="adminUserPage/css/style.css">
</head>

<body>

  <div class="site-wrap">

    <div class="site-mobile-menu">
      <div class="site-mobile-menu-header">
        <div class="site-mobile-menu-close mt-3">
          <span class="icon-close2 js-menu-toggle"></span>
        </div>
      </div>
      <div class="site-mobile-menu-body"></div>
    </div>

    <header class="site-navbar py-3" role="banner">
      <div class="container-fluid">
        <div class="row align-items-center">
          <div class="col-11 col-xl-2" style="left:30%">
            <h1 class="mb-0"><p href="index.html" class="text-white h2 mb-0" style="font-family:Segoe UI Symbol; font-size: 120%;">Kullanıcı<span
                  class="text-primary" id="addUserName">Sayfası</span> </p></h1>
          </div>
        </div>
      </div>
  </div>
  </header>

  <div class="site-section site-hero">
    <div class="container">
      <div class="row align-items-center"
        style="margin:0px; width:30%;height: 10em; padding: 0px;height: 100px;position:absolute; left: 10px">
        <div class="col-md-10"style="margin-top: -5%">
          <!-- <form id="userSearch" method="POST" action="/userSearch" enctype="multipart/form-data">  -->
          <form id="userSearch">
            <h1 class="d-block mb-4" data-aos="fade-up" data-aos-delay="200"style="font-family:Segoe UI Symbol;" style="font-size:10px;">Kitap Ara</h1>
            <div style="margin-bottom:20%"></div>
            <span class="d-block mb-5 caption" data-aos="fade-up" data-aos-delay="300"style="font-family:Segoe UI Symbol;">Kitap ISBN'si Veya Kitap Adı
              Giriniz</span>
              <div style="margin-bottom:25%"></div>
            <input class="d-block mb-5 caption" type="text" style="color:black" data-aos="fade-up" data-aos-delay="300"
              name="queryvar" id="bookSearch" placeholder="Ad veya ISBN" required>
              <div style="margin-bottom:12%;margin-top: 0%"></div>
            <button class="btn-custom" data-aos="fade-up" data-aos-delay="400" id="submitButton"
              type="submit"><span style="font-family:Segoe UI Symbol;">Kitap Ara</span></button>
          </form>
        </div>
      </div>
      <div class="row align-items-center"
        style="margin: 0px; padding:0px;position: absolute;left:30%;padding-bottom: 10%;height: 60%">
        <div class="col-md-10" style="margin-top: 18%;">
          <form id="assignBook" method="POST" action="/assignBook" enctype="multipart/form-data">
            <h1 class="d-block mb-4" data-aos="fade-up" data-aos-delay="200" style="font-family:Segoe UI Symbol;">Kitap Al</h1>
            <div style="margin-bottom:23%"></div>
            <span class="d-block mb-5 caption" data-aos="fade-up" data-aos-delay="300"
              style="font-family:Segoe UI Symbol;padding-top: 0%;margin-top: 0%">Kitap ISBN'si Veya Kitap Adı Giriniz</span>
            <div style="margin-bottom:20%"></div>
            <input class="d-block mb-5 caption" style="color:black" data-aos="fade-up" data-aos-delay="300" type="text"
              name="bookInfo" id="bookAssign" placeholder="Ad veya ISBN" required>
            <div style="margin-bottom:15%;margin-top: 0%"></div>
            <button id="submitButton" type="submit" class="btn-custom" data-aos="fade-up"
              data-aos-delay="400"><span style="font-family:Segoe UI Symbol;">Kitap Al</span></button>
            <!--<a href="#" class="btn-custom" data-aos="fade-up" data-aos-delay="400"><span>Kitap Ara</span></a>-->
            <div style="padding-top: 0%"></div>
          </form>
        </div>
      </div>
      <div class="row align-items-center"
        style="margin: 0px; padding:0px;position: absolute;left:60%;padding-bottom: 10%;height: 60%;width:35%;">
        <div class="col-md-10" style="margin-top: 12%">
          <form id="userIsbnUploadForm" method="POST" action="/return" enctype="multipart/form-data">
            <h1 class="d-block mb-4" data-aos="fade-up" data-aos-delay="200" style="font-family:Segoe UI Symbol;">Kitap Ver</h1>
            <div style="margin-bottom:15%"></div>
            <span class="d-block mb-5 caption" data-aos="fade-up" data-aos-delay="300"
              style="padding-top: 0%;margin-top: 0%;font-family:Segoe UI Symbol;">Kitabın ISBN Fotoğrafını Yükleyiniz</span>
            <div style="margin-bottom:25%"></div>
            <input type="file" name="returnBookImage" class="custom-file-input" id="returnImageInput" class="d-block mb-5 caption" style="color:orange;" data-aos="fade-up" data-aos-delay="300" required single>
            <div style="margin-bottom:10%;margin-top: 11%"></div>
            <button type="submit" class="btn-custom" data-aos="fade-up" data-aos-delay="400" id="imageButton"><span style="font-family:Segoe UI Symbol;">Kitap Ver</span></button>
            <!--<a href="#" class="btn-custom" data-aos="fade-up" data-aos-delay="400"><span>Kitap Ver</span></a>-->
            <div style="padding-top: 0%"></div>
          </form>
          <!--<span class="d-block mb-3 caption" data-aos="fade-up" data-aos-delay="100">AMINİGİ 2019</span>-->
        </div>
      </div>
    </div>
  </div>

  <script src="adminUserPage/js/jquery-3.3.1.min.js"></script>
  <script src="adminUserPage/js/jquery-migrate-3.0.1.min.js"></script>
  <script src="adminUserPage/js/jquery-ui.js"></script>
  <script src="adminUserPage/js/popper.min.js"></script>
  <script src="adminUserPage/js/bootstrap.min.js"></script>
  <script src="adminUserPage/js/owl.carousel.min.js"></script>
  <script src="adminUserPage/js/jquery.stellar.min.js"></script>
  <script src="adminUserPage/js/jquery.countdown.min.js"></script>
  <script src="adminUserPage/js/jquery.magnific-popup.min.js"></script>
  <script src="adminUserPage/js/bootstrap-datepicker.min.js"></script>
  <script src="adminUserPage/js/aos.js"></script>

  <script src="adminUserPage/js/main.js"></script>
  <script>
    //Load Username
    document.addEventListener('DOMContentLoaded', loadUserName);
    function loadUserName(){
      console.log("called");
      var xhr = new XMLHttpRequest();
      xhr.open('GET', '/getUserName', true);
      xhr.onload = async function () {
        if (this.status == 200) {
          let element = document.getElementById("addUserName");
          let userName = await JSON.parse(this.responseText);
          element.innerHTML = "Sayfası("+userName+")";
          console.log(userName);
        }
      }
      xhr.send();
    }
    
    //Upload Image
    document.getElementById("userIsbnUploadForm").addEventListener('submit', imageUpload);
    function imageUpload(e){
      e.preventDefault();
      document.getElementById("imageButton").disabled = true;
      document.body.style.cursor = 'wait';
      let imageFile = document.getElementById("returnImageInput");
      console.log("tttttt:" + imageFile.files[0]);
      const xhr = new XMLHttpRequest();
      const formData = new FormData();
      xhr.onload = function(){
        document.getElementById("imageButton").disabled = false;
        document.body.style.cursor = 'default';
        let result = JSON.parse(this.responseText);
        if(result == "0"){
          alert("Bu kitaba sahip değilsiniz!");
        }else if(result == "1"){ 
          alert("Kitap kütüphaneye iade edildi!");
        }else{
          alert("Bilinmeyen");
        }
      }
      formData.append("returnBookImage",imageFile.files[0]);
      xhr.open('POST', '/return', true);
      xhr.send(formData);
    }

    //Book Search
    document.getElementById('userSearch').addEventListener('submit', getBookInfo);
    function getBookInfo(e){
      e.preventDefault();
        let bookInfo = document.getElementById("bookSearch").value.toLowerCase();
        let param = 'queryvar='+bookInfo;
        bookInfo.value = "";
        //console.log(param);
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '/userSearch', true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        xhr.onload = function(){
          let result = JSON.parse(this.responseText);
          console.log("RES!: "+result);
          if(result == ""){
            alert("Aradığınız kitap bulunamadı!");
          }else{
            alert("Aradığınız kitap kütüphanede mevcut!\nKitap Adı: "+result.bookname+ "\nISBN:" +" "+result.isbn);
          }
          
        }
        xhr.send(param);
    }

    //Request Book
    document.getElementById('assignBook').addEventListener('submit', getBook);
    function getBook(e){
      e.preventDefault();
        let bookInfo = document.getElementById("bookAssign").value;
        let param = 'bookInfo='+bookInfo;
        bookInfo.value = "";
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '/assignBook', true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        xhr.onload = function(){
          let result = JSON.parse(this.responseText);
          console.log(result);
          console.log(typeof result.hasMoreThanThreeBooks);
          console.log("RES!: "+result.hasMoreThanThreeBooks,result.hasOutOfDateBook,result.someOneHasBook);
          let message = "";
          if(result.hasMoreThanThreeBooks == true){
              message += "3 kitaba sahipsiniz! Daha fazla kitap alamazsnız.\n";
          }if(result.hasOutOfDateBook == true){
              message += "İade tarihi geçmiş kitap veya kitaplarınız var! Kitapları iade ediniz.\n";
          }if(result.someOneHasBook == true){
              message += "Kitap alınmış!";
          }if(message != ""){
            alert(message);
          }
          if(result == ""){
            alert("Aradığınız kitap bulunamadı!");
          }else if(result == "error"){
            alert("Kitabı ararken bir şeyler ters gitti!");
          }else if(message == ""){
            alert("Kitap başarıyla envanterinize eklendi!");
          }
          message = "";
        }
        xhr.send(param);
    }
  </script>
</body>

</html>


########## admin.html #############

<!DOCTYPE html>
<html lang="en">

<head>
  <title>Kullanıcı Sayfası &mdash;</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link href="https://fonts.googleapis.com/css?family=Roboto+Mono" rel="stylesheet">
  <link rel="stylesheet" href="adminUserPage/fonts/icomoon/style.css">
  <link rel="stylesheet" href="adminUserPage/css/bootstrap.min.css">
  <link rel="stylesheet" href="adminUserPage/css/magnific-popup.css">
  <link rel="stylesheet" href="adminUserPage/css/jquery-ui.css">
  <link rel="stylesheet" href="adminUserPage/css/owl.carousel.min.css">
  <link rel="stylesheet" href="adminUserPage/css/owl.theme.default.min.css">
  <link rel="stylesheet" href="adminUserPage/css/bootstrap-datepicker.css">
  <link rel="stylesheet" href="adminUserPage/fonts/flaticon/font/flaticon.css">
  <link rel="stylesheet" href="adminUserPage/css/aos.css">

  <link rel="stylesheet" href="adminUserPage/css/style.css">
  <style>
    .site-hero,
    .site-hero .row {
      min-height: 100px;
      height: calc(100vh - 95px);
    }
  </style>
</head>

<body>

  <div class="site-wrap">

    <div class="site-mobile-menu">
      <div class="site-mobile-menu-header">
        <div class="site-mobile-menu-close mt-3">
          <span class="icon-close2 js-menu-toggle"></span>
        </div>
      </div>
      <div class="site-mobile-menu-body"></div>
    </div>

    <header class="site-navbar py-3" role="banner">
      <div class="container-fluid">
        <div class="row align-items-center">
          <div class="col-11 col-xl-2" style="left:35%">
            <h1 class="mb-0">
              <p href="index.html" class="text-white h2 mb-0" style="font-family:Segoe UI Symbol; font-size: 120%;">Yönetici<span class="text-primary" style="font-family:Segoe UI Symbol;">Sayfası</span> </p>
            </h1>
          </div>
        </div>
      </div>
  </div>
  </header>

  <div class="site-section site-hero">
    <div class="container">
      <div class="row align-items-center"
        style="margin:0px;padding: 0px;position:absolute; left: 10px;width:99%;height:47.5%;">
        <div class="col-md-10" style="left:15%;margin-bottom:50%;width:30%">
          <form id="addBook" method="POST" action="/admin" enctype="multipart/form-data">
            <h1 class="d-block mb-4" data-aos="fade-up" data-aos-delay="200" style="font-family:Segoe UI Symbol;">Sisteme Kitap Yükle</h1>
            <span class="d-block mb-5 caption" data-aos="fade-up" data-aos-delay="300" style="font-family:Segoe UI Symbol;">Kitap Adını ve ISBN Fotoğrafını
              Yükleyiniz</span>
            <input class="d-block mb-5 caption" type="text" style="color:black" data-aos="fade-up" data-aos-delay="300"
              name="bookname" id="bookName" required>
            <input type="file" name="bookImage" class="custom-file-input" id="returnImageInput"
              class="d-block mb-5 caption" style="color:orange;margin-bottom:1%" data-aos="fade-up" data-aos-delay="300"
              required>
            <button class="btn-custom" data-aos="fade-up" data-aos-delay="400" id="submitButton"
              type="submit"><span style="font-family:Segoe UI Symbol;">Kitap Kaydet</span></button>
          </form>
        </div>
      </div>
      <br>
      <div class="row align-items-center"
        style="margin-top:25%;padding: 0px;position:absolute; left: 10px;width:99%;height:47.5%;">
        <div class="col-md-10" style="left:15%;margin-bottom:50%;width:30%">
          <form id="setDate" method="POST" action="/setDate" enctype="multipart/form-data">
            <h1 class="d-block mb-4" data-aos="fade-up" data-aos-delay="200" style="font-family:Segoe UI Symbol;">Sistem Günü Ötele</h1>
            <span class="d-block mb-5 caption" data-aos="fade-up" data-aos-delay="300" style="font-family:Segoe UI Symbol;">Gün Sayısını Giriniz</span>
            <input class="d-block mb-5 caption" type="number" style="color:black" data-aos="fade-up"
              data-aos-delay="300" name="dayNumber" id="bookDay" min="1" required>
            <button class="btn-custom" data-aos="fade-up" data-aos-delay="400" id="submitDay" type="submit"><span style="font-family:Segoe UI Symbol;">Gün
                Ötele</span></button>
          </form>
        </div>
      </div>
      <br>
      <div class="row align-items-center"
        style="margin-top:48%;padding: 0px;position:absolute; left: 10px;width:99%;height:47.5%;">
        <div class="col-md-10" style="left:15%;margin-bottom:50%;width:30%">
          <form id="userSearch" method="POST" action="/userSearch" enctype="multipart/form-data">
            <h1 class="d-block mb-4" data-aos="fade-up" data-aos-delay="200" style="font-family:Segoe UI Symbol;">Kullanıcı Listele</h1>
            <span class="d-block mb-5 caption" data-aos="fade-up" data-aos-delay="300" style="font-family:Segoe UI Symbol;">Kullanıcıları Sahip Oldukları
              Kitaplarıyla Listelemek İçin Butona Tıklayın</span>
            <button class="btn-custom" data-aos="fade-up" data-aos-delay="400" id="submitButton"
              type="submit"><span style="font-family:Segoe UI Symbol;">Kullanıcı Listele</span></button>
          </form>
          <div style="margin-top:5%;width: 65%;">
            <table class="table" data-aos="fade-up" data-aos-delay="400" id="table1">

            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
  </div>

  <script src="adminUserPage/js/jquery-3.3.1.min.js"></script>
  <script src="adminUserPage/js/jquery-migrate-3.0.1.min.js"></script>
  <script src="adminUserPage/js/jquery-ui.js"></script>
  <script src="adminUserPage/js/popper.min.js"></script>
  <script src="adminUserPage/js/bootstrap.min.js"></script>
  <script src="adminUserPage/js/owl.carousel.min.js"></script>
  <script src="adminUserPage/js/jquery.stellar.min.js"></script>
  <script src="adminUserPage/js/jquery.countdown.min.js"></script>
  <script src="adminUserPage/js/jquery.magnific-popup.min.js"></script>
  <script src="adminUserPage/js/bootstrap-datepicker.min.js"></script>
  <script src="adminUserPage/js/aos.js"></script>

  <script src="adminUserPage/js/main.js"></script>

  <script>
    //Upload Book
    document.getElementById("addBook").addEventListener('submit', uploadBookForm);
    function uploadBookForm(e) {
      e.preventDefault();
      console.log("hmm");
      document.getElementById("submitButton").disabled = true;
      document.body.style.cursor = 'wait';
      let book = document.getElementById("bookName").value;
      console.log("book:" + book);
      let bookPhoto = document.getElementById("returnImageInput");
      console.log("photo name:" + bookPhoto.files[0]);
      let data = new FormData();
      data.append("bookname", book);
      data.append("bookImage", bookPhoto.files[0]);
      const xhr = new XMLHttpRequest();
      xhr.onload = function () {
        document.body.style.cursor = 'default';
        document.getElementById("submitButton").disabled = false;
        let result = JSON.parse(this.responseText);
        if (result == "0") {
          alert("ISBN fotoğrafını upload ederken bir şeyler ters gitti!");
        } else if (result == "2") {
          alert("Kitabı veri tabanına kaydederken bir şeyler ters gitti!");
        } else if (result == "1") {
          alert("Kitap başarıyla veri tabanına eklendi!");
        }
      }
      xhr.open('POST', '/admin', true);
      xhr.send(data);
    }

    //Change Date
    document.getElementById("setDate").addEventListener('submit', uploadDayNumber);
    function uploadDayNumber(e) {
      e.preventDefault();
      document.getElementById("submitDay").disabled = true;
      document.body.style.cursor = 'wait';
      let number = document.getElementById("bookDay").value;
      console.log("dayNumber:" + number);
      let data = new FormData();
      data.append("dayNumber", number);
      const xhr = new XMLHttpRequest();
      xhr.onprogress = function(){
        document.body.style.cursor = 'wait';
      }
      xhr.onload = function () {
        document.body.style.cursor = 'default';
        let result = JSON.parse(this.responseText);
        if (result == "0") {
          alert("Sistem tarihini değiştirirken bir şeyler ters gitti!");
        } else {
          alert("Sistem tarihi güncellendi!\nYeni sistem tarihi: " + result);
        }
      }
      xhr.open('POST', '/setDate', false);
      xhr.send(data);
    }

    //List Users
    document.getElementById("userSearch").addEventListener('submit', listUsers);



    function listUsers(e) {
      e.preventDefault();
      let xhr = new XMLHttpRequest();
      xhr.open('GET', '/getUsers', false);
      xhr.onload = function () {
        if (this.status == 200) {
          var users = JSON.parse(this.responseText);
          //var users = JSON.stringify(users);
          console.log(typeof users);
          console.log("userslength: " + users.length);
          console.log("users: " + users);
          let keys = ["#", "Kullanıcı Adı", "Kitap Adı","Kitap ISBN", "Veriliş Tarihi", "İade Tarihi"];
          let table = document.getElementById("table1");
          table.innerHTML = "";
          let thead = table.createTHead();
          thead.setAttribute("class", "thead-dark");
          let row = thead.insertRow();
          for (let k of keys) {
            let th = document.createElement("th");
            let text = document.createTextNode(k);
            th.appendChild(text);
            row.appendChild(th);
          }
          let count = 0;
          for (let i = 0; i < users.length; i++) {
            for (let m = 0; m < users[i].books.length; m++) {
              let date1 = new Date(users[i].books[m].bookDate);
              let date2 = new Date(users[i].books[m].returnDate);
              let formattedDate = date1.getDate() + "-" + (date1.getMonth()+1) + "-" + date1.getFullYear();
              let formattedDate2 = date2.getDate() + "-" + (date2.getMonth()+1) + "-" + date2.getFullYear();
              count++;
              row = table.insertRow();
              cell1 = row.insertCell();
              cell2 = row.insertCell();
              cell = row.insertCell();
              cell3 = row.insertCell();
              cell4 = row.insertCell();
              cell5 = row.insertCell();
              let text1 = document.createTextNode(count);
              let text2 = document.createTextNode(users[i]._id);
              let text = document.createTextNode(users[i].books[m].bookname);
              let text3 = document.createTextNode(users[i].books[m].bookIsbn);
              let text4 = document.createTextNode(formattedDate);
              let text5 = document.createTextNode(formattedDate2);
              cell1.appendChild(text1);
              cell2.appendChild(text2);
              cell.appendChild(text);
              cell3.appendChild(text3);
              cell4.appendChild(text4);
              cell5.appendChild(text5);
            }
          }
          console.log("COUNT:" + count);
        }
      }
      xhr.send();
    }
  </script>

</body>
</html>


######## login.html ##########33

<!DOCTYPE html>
<html lang="en">
<head>
	<title>KÜTÜPHANE</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
<!--===============================================================================================-->	
	<link rel="icon" type="image/png" href="loginPage/images/icons/favicon.ico"/>
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/vendor/bootstrap/css/bootstrap.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/fonts/Linearicons-Free-v1.0.0/icon-font.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/vendor/animate/animate.css">
<!--===============================================================================================-->	
	<link rel="stylesheet" type="text/css" href="loginPage/vendor/css-hamburgers/hamburgers.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/vendor/animsition/css/animsition.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/vendor/select2/select2.min.css">
<!--===============================================================================================-->	
	<link rel="stylesheet" type="text/css" href="loginPage/vendor/daterangepicker/daterangepicker.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="loginPage/css/util.css">
	<link rel="stylesheet" type="text/css" href="loginPage/css/main.css">
<!--===============================================================================================-->
</head>
<body>
	
	<div class="limiter">
		<div class="container-login100" style="background-image: url('books.jpg');">
			<div class="wrap-login100 p-l-55 p-r-55 p-t-65 p-b-50">
				<form class="login100-form validate-form" method="POST" action="/login" enctype="multipart/form-data" id="login">
					<span class="login100-form-title p-b-33">
						Giriş Yap
					</span>

					<div class="wrap-input100 validate-input">
						<input class="input100" type="text" name="username" placeholder="Kullanıcı Adı" id="username" required>
						<span class="focus-input100-1"></span>
						<span class="focus-input100-2"></span>
					</div>

					<div class="wrap-input100 rs1 validate-input">
						<input class="input100" id="password"type="password" name="password" placeholder="Şifre" required>
						<span class="focus-input100-1"></span>
						<span class="focus-input100-2"></span>
					</div>
					<input type="checkbox" onclick="foo()" onload="reload()" style="margin-top: 5%; margin-left: 33%;">Parolayı Göster
					<div class="container-login100-form-btn m-t-20">
						<button type="submit" class="login100-form-btn">
							Giriş
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	

	
<!--===============================================================================================-->
	<script src="loginPage/vendor/jquery/jquery-3.2.1.min.js"></script>
<!--===============================================================================================-->
	<script src="loginPage/vendor/animsition/js/animsition.min.js"></script>
<!--===============================================================================================-->
	<script src="loginPage/vendor/bootstrap/js/popper.js"></script>
	<script src="loginPage/vendor/bootstrap/js/bootstrap.min.js"></script>
<!--===============================================================================================-->
	<script src="loginPage/vendor/select2/select2.min.js"></script>
<!--===============================================================================================-->
	<script src="loginPage/vendor/daterangepicker/moment.min.js"></script>
	<script src="loginPage/vendor/daterangepicker/daterangepicker.js"></script>
<!--===============================================================================================-->
	<script src="loginPage/vendor/countdowntime/countdowntime.js"></script>
<!--===============================================================================================-->
	<script src="loginPage/js/main.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			var x = document.getElementById("password");
            x.type == "password";
		});
	</script>
</body>
</html>